generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  email      String    @unique
  password   String

  isAdmin    Boolean   @default(false)   @map("is_admin")

  name       String    @unique
  avatarPath String    @default("/uploads/default-avatar.png") @map("avatar_path")
  phone      String?   @default("")
  orders     Order[]
  favorites  Product[]
  reviews    Review[]
}

model Product {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  name        String      @unique
  slug        String      @unique
  description String
  price       Int
  images      String[]
  categoryId  Int?        @map("category_id")
  userId      Int?        @map("user_id")
  OrderItem   OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
  reviews     Review[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  text      String
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  status    EnumOrderStatus @default(PENDING)
  userId    Int             @map("user_id")
  user      User            @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime
  quantity   Int
  price      Int
  product_id Int
  order_id   Int?
  Order      Order?   @relation(fields: [order_id], references: [id])
  Product    Product  @relation(fields: [product_id], references: [id])
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
